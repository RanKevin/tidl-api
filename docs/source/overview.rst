********
Overview
********

Software Architecture
+++++++++++++++++++++

:numref:`TIDL API Software Architecture` shows the TIDL API software architecture and how it fits into the software ecosystem on AM57x. The TIDL API leverages OpenCL APIs to:

* Make the application's input data available in memories associated with the :term:`compute core`.
* Initialize and run the layer groups associated with the network on compute cores
* Make the output data available to the application

.. _`TIDL API Software Architecture`:

.. figure:: images/tidl-api.png
    :align: center

    TIDL API Software Architecture


Terminology
+++++++++++
.. glossary::
    :sorted:

    Network binary
        A binary description of the layers used in a Deep Learning model and the connections between the layers. The network is generated by the TIDL import tool and used by the TIDL API.

    Parameter binary
        A binary file with weights generated by the TIDL import tool and used by the TIDL API.

    Layer
        A layer consists of mathematical operations such as filters, rectification linear unit (ReLU) operations, downsampling operations (usually called average pooling, max pooling or striding), elementwise additions, concatenations, batch normalization and fully connected matrix multiplications. Refer XXX for a list of supported layers.

    Layer group
        A collection of interconnected layers. Forms a unit of execution. The Execution Object "runs" a layer group on a compute core i.e. it performs the mathematical operations associated with the layers in the layer group on the input and generates one or more outputs.

    Compute core
        A single EVE or C66x core. A layer group is executed on a compute core.

    Executor
        A TIDL API class. The executor is responsible for initializing Execution Objects with a Configuration. The Executor is also responsible for initialzing the OpenCL runtime. Refer :ref:`api-ref-executor` for available methods.

    Execution Object
    EO
        A TIDL API class. Manages the execution of a layer group on a compute core. There is an EO associated with each compute core. The EO leverages the OpenCL runtime to manage execution. Implementation of these classes will call into OpenCL runtime to offload network processing abstracting these details from the user. Refer :ref:`api-ref-eo` for available methods.

    ExecutionObjectPipeline
        A TIDL API class. Used to pipeline execution of a single input frame across multiple Execution Objects. Refer :ref:`api-ref-eop` for available methods.


    Configuration
        A TIDL API class. Used to specify a configuration for the Executor, including pointers to the network and parameter binary files. Refer :ref:`api-ref-configuration` for available methods.
